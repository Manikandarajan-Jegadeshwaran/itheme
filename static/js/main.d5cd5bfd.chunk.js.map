{"version":3,"sources":["logo.svg","layout/xs/index.js","layout/sm/index.js","layout/md/index.js","layout/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","width","height","margin","header","border","padding","container","footer","React","memo","props","classes","className","Grid","item","display","flexWrap","leftPane","useTheme","sm","useMediaQuery","breakpoints","up","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5cd5bfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    margin: 0,\r\n  },\r\n  header: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"80%\",\r\n  },\r\n  footer: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n  },\r\n}));\r\n\r\nfunction XSLayout(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.header}>\r\n        <Grid item>header</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.container}>\r\n        <Grid item>xs</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.footer}>\r\n        <Grid item>xs</Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(XSLayout);\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    margin: 0,\r\n  },\r\n  header: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"80%\",\r\n  },\r\n  footer: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n  },\r\n}));\r\n\r\nfunction SMLayout(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.header}>\r\n        <Grid item>header</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.container}>\r\n        <Grid item>sm</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.footer}>\r\n        <Grid item>footer</Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SMLayout);\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    margin: 0,\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  header: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n    width: \"100%\",\r\n  },\r\n  leftPane: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"80%\",\r\n    width: \"35%\",\r\n  },\r\n  container: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"80%\",\r\n    width: \"65%\",\r\n  },\r\n  footer: {\r\n    border: \"1px solid\",\r\n    padding: 10,\r\n    height: \"10%\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction MDLayout(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.header}>\r\n        <Grid item>header</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.leftPane}>\r\n        <Grid item>left</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.container}>\r\n        <Grid item>md</Grid>\r\n      </Grid>\r\n      <Grid container className={classes.footer}>\r\n        <Grid item>xs</Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(MDLayout);\r\n","import React from \"react\";\r\nimport { useTheme, makeStyles } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport XS from \"layout/xs\";\r\nimport SM from \"layout/sm\";\r\nimport MD from \"layout/md\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n  },\r\n}));\r\n\r\nfunction Layout(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const xs = useMediaQuery(theme.breakpoints.up(\"xs\"));\r\n  const sm = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const md = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  return (\r\n    <div className={classes.root}>{md ? <MD /> : sm ? <SM /> : <XS />}</div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Layout);\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Layout from \"layout\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}